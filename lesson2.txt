Урок 2:
touch - імя файлу.txt - довзоляє створити файл швидко
ls - list
cd - change directory
mkdir - створити новий директорій
cp foo.txt bar.txt - (foo - файл, bar - копія)   cp - cope
mv - як копіювати, але переміщувати (mv foo.txt ../foo-3.txt)   mv - move
cat - first-file.txt - відображає інформацію у файлі

Є папка в якій ми зберігаємо файли (робоча директорія)
Є таке, як Staging Area - коли ми працюємо в директорії, гіт не знає нічого про ці файли(знає що вони там є, але він їх не відслідковує)
Щоб ці файли попали в першу папку треба виконати git add Ця команда каже гіту добавити ці файли в його "оперативну пам'ять"
git add baz.txt - відслідковує саме цей файл
Після цієї команди, гіт відслідковує зміни в цих файлах!!!!!!!

Щоб зафіксувати, зберегтись, ми маємо виконати git commit
 -m дає опис коміту (-m - message)

git add . - крапочка означає, що будуть додані всі файли
тобто він добавив всі файли в staging area

Неможна робити два одинакових коміти. Ця історія потім знадобиться для того, щоб потім щось пошукати.

"Коміт потрібно робити тоді, коли завершили якийсь шмат роботи";"Робите перерву - робите коміт"; "їдете додому - робите коміт"
Золоте правило - коміт має відображати те, що ви виконали у файлі.


Hash - хеш, зміни файлу, унікальний код який прив'язаний до змін у файлах

git log - всі зміни

head - вказівник

git branch - нова гілка
git checkout - перейти на нову гілку (head - вказівник де ти зараз знаходишся)
git merge - об'єднати зміни в обох гілках

При змерженні можуть виникнути конфлікти (мерж конфлікт): коли одна і та ж стрічка була змінена двома розробниками. Тоді нам треба вирішити, які зміни правильні, 1,2, або обидва

Залежно звідки робити зміни, так відбуваються зміни

Коли робимо мерж - можемо відстежувати
Коли ребейс - набагато важче відстежувати зміни

git clone - дозволяє скопіювати (вибираємо HTTPS).
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

https://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@github.com/AndriyRad/fork-me.git 
